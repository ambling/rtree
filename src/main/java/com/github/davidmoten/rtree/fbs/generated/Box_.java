// automatically generated by the FlatBuffers compiler, do not modify

package com.github.davidmoten.rtree.fbs.generated;

import java.nio.*;
import java.lang.*;
import java.util.*;

import com.github.davidmoten.rtree.geometry.Geometry;
import com.github.davidmoten.rtree.geometry.Rectangle;
import com.github.davidmoten.rtree.internal.util.ObjectsHelper;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Box_ extends Struct implements Rectangle {
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Box_ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float x1() { return bb.getFloat(bb_pos + 0); }
  public float y1() { return bb.getFloat(bb_pos + 4); }
  public float x2() { return bb.getFloat(bb_pos + 8); }
  public float y2() { return bb.getFloat(bb_pos + 12); }

  public static int createBox_(FlatBufferBuilder builder, float x1, float y1, float x2, float y2) {
    builder.prep(4, 16);
    builder.putFloat(y2);
    builder.putFloat(x2);
    builder.putFloat(y1);
    builder.putFloat(x1);
    return builder.offset();
  }

  @Override
  public float area() {
    return Rectangle.Helper.area(this);
  }

  @Override
  public Rectangle add(Rectangle r) {
    return Rectangle.Helper.add(this, r);
  }

  @Override
  public boolean contains(double x, double y) {
    return Rectangle.Helper.contains(this, x, y);
  }

  @Override
  public boolean intersects(Rectangle r) {
    return Rectangle.Helper.intersects(this, r);
  }

  @Override
  public double distance(Rectangle r) {
    return Rectangle.Helper.distance(this, r);
  }

  @Override
  public Rectangle mbr() {
    return this;
  }

  @Override
  public float intersectionArea(Rectangle r) {
    return Rectangle.Helper.intersectionArea(this, r);
  }

  @Override
  public float perimeter() {
    return Rectangle.Helper.perimeter(this);
  }

  @Override
  public Geometry geometry() {
    return this;
  }

  @Override
  public String toString() {
    return Rectangle.Helper.toString(this);
  }

  @Override
  public int hashCode() {
    return Rectangle.Helper.hashCode(this);
  }

  @Override
  public boolean equals(Object obj) {
    com.github.davidmoten.guavamini.Optional<Box_> other = ObjectsHelper.asClass(obj, Box_.class);
    if (other.isPresent()) {
      return Rectangle.Helper.equals(this, other.get());
    } else
      return false;
  }
}

