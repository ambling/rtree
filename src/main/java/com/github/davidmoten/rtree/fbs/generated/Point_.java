// automatically generated by the FlatBuffers compiler, do not modify

package com.github.davidmoten.rtree.fbs.generated;

import java.nio.*;
import java.lang.*;
import java.util.*;

import com.github.davidmoten.rtree.geometry.Geometry;
import com.github.davidmoten.rtree.geometry.Point;
import com.github.davidmoten.rtree.geometry.Rectangle;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Point_ extends Struct implements Point {
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Point_ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float x() { return bb.getFloat(bb_pos + 0); }
  public float y() { return bb.getFloat(bb_pos + 4); }

  public static int createPoint_(FlatBufferBuilder builder, float x, float y) {
    builder.prep(4, 8);
    builder.putFloat(y);
    builder.putFloat(x);
    return builder.offset();
  }

  @Override
  public double distance(Point p) {
    return Point.Helper.distance(this, p);
  }

  @Override
  public double distanceSquared(Point p) {
    return Point.Helper.distanceSquared(this, p);
  }

  @Override
  public Geometry geometry() {
    return this;
  }

  @Override
  public float x1() {
    return x();
  }

  @Override
  public float y1() {
    return y();
  }

  @Override
  public float x2() {
    return x();
  }

  @Override
  public float y2() {
    return y();
  }

  @Override
  public float area() {
    return 0;
  }

  @Override
  public Rectangle add(Rectangle r) {
    return Point.Helper.add(this, r);
  }

  @Override
  public boolean contains(double x, double y) {
    return Point.Helper.contains(this, x, y);
  }

  @Override
  public float intersectionArea(Rectangle r) {
    return 0;
  }

  @Override
  public float perimeter() {
    return 0;
  }

  @Override
  public double distance(Rectangle r) {
    return Point.Helper.distance(this, r);
  }

  @Override
  public Rectangle mbr() {
    return this;
  }

  @Override
  public boolean intersects(Rectangle r) {
    return Point.Helper.intersects(this, r);
  }

  @Override
  public String toString() {
    return Point.Helper.toString(this);
  }

  @Override
  public int hashCode() {
    return Point.Helper.hashCode(this);
  }

  @Override
  public boolean equals(Object obj) {
    return Point.Helper.equals(this, obj);
  }
}

